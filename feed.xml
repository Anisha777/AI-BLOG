<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://anisha777.github.io/AI-BLOG/feed.xml" rel="self" type="application/atom+xml" /><link href="https://anisha777.github.io/AI-BLOG/" rel="alternate" type="text/html" /><updated>2022-06-30T03:59:00-05:00</updated><id>https://anisha777.github.io/AI-BLOG/feed.xml</id><title type="html">All About Artificial Intelligence</title><subtitle>Welcome to a blog which is all about Data Science, Programming, Machine Learning, Deep Learning, Computer Vision and Natural Language Processing.</subtitle><entry><title type="html">My Third Blog</title><link href="https://anisha777.github.io/AI-BLOG/2022/06/24/My-Third-Blog.ipynb" rel="alternate" type="text/html" title="My Third Blog" /><published>2022-06-24T00:00:00-05:00</published><updated>2022-06-24T00:00:00-05:00</updated><id>https://anisha777.github.io/AI-BLOG/2022/06/24/My-Third-Blog</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# Basic of Python\n", "> Here are some basic of python to learn.\n", "\n", "- toc: true \n", "- badges: true\n", "- comments: true\n", "- categories: [programming]\n", "- image: images/" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Basic of Python\n", "The syntax of Python is straightforward and resembles that of English. Python's syntax differs from various other programming languages in that it enables programmers to construct applications with fewer lines of code. Python operates on an interpreter system, allowing for the immediate execution of written code. As a result, prototyping can proceed quickly." ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Some basics of python\n", "- Print() Function\n", "- Escape Sequence\n", " - Types of Escape sequence\n", "- Comments\n", "- Variable\n", "- Rule for assigning variable\n", "- String Concatenation\n", "- User Input\n", "- Int() Function\n", "- Two or more input in one line\n", "- String Formatting\n", "- String Indexing\n", "- String Slicing\n", "- Step Argument\n", "- String methods\n", " - len() Function\n", " - lower() Method\n", " - Upper() Method\n", " - Tilt() Method\n", " - Count() Method\n", "- Solving problem with Space\n", " - lstrip Method\n", " - rstrip Method \n", " - strip Method \n", "- Find and Replace Method\n", "- String as Immutable\n", " " ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Print() Function\n", "Any number of parameters can be sent to the print() functionÂ in Python, which puts them out on a single line of text." ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Hello Anisha\n", "Hello Anisha\n" ] } ], "source": [ "# Use of Single or Double Quuotation mark\n", "print(\"Hello Anisha\")\n", "print('Hello Anisha')" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "ename": "SyntaxError", "evalue": "invalid syntax (3133193719.py, line 2)", "output_type": "error", "traceback": [ "\u001b[1;36m File \u001b[1;32m\"C:\\Users\\default.LAPTOP-1LOPBDH8\\AppData\\Local\\Temp\\ipykernel_3076\\3133193719.py\"\u001b[1;36m, line \u001b[1;32m2\u001b[0m\n\u001b[1;33m print(\"Hello \"Anisha\"\")\u001b[0m\n\u001b[1;37m ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n" ] } ], "source": [ "# We cannot use \" \" inside \" \" and ' ' inside ' '\n", "print(\"Hello \"Anisha\"\")\n", "print('Hello 'Anisha'') " ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "hello 'Anisha'\n", "Hello \"Anisha\"\n" ] } ], "source": [ "# We can use \" \" inside ' ' and ' ' inside \" \"\n", "print(\"hello 'Anisha'\")\n", "print('Hello \"Anisha\"')\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Escape Sequence\n", "Use an escape character to terminate characters that aren't allowed in a string. A backslash (/) is an escape character, and the character you want to insert comes after it." ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Hello \"Anisha\"\n" ] } ], "source": [ "# Printing \" \" inside \" \" using escape sequence\n", "print(\"Hello \\\"Anisha\\\"\")" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ " - Types of Escape sequence \n", " \\\\'\tSingle Quote\t\n", " \\\\\\\\\tBackslash\t\n", " \\n\tNew Line\t\n", " \\r\tCarriage Return \t\n", " \\t\tTab\t\n", " \\b\tBackspace \t\n", " \\f\tForm Feed\t\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Comments\n", "Python code can be explained using comments.Comments are sued to make code more readable.\n", "\n" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "# Single line comments\n", "# Single line comments are done using '#' symbol\n", "# example\n", "# This is single line comment" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Hello Anisha\n" ] } ], "source": [ "# Multiple line comments\n", "# Multiple line comments are done using ' \"\"\" ' ' \"\"\"\" ' symbol\n", "# example\n", "\n", "\"\"\"\n", "This is a comment\n", "written in\n", "more than just one line\n", "\"\"\"\n", "print(\"Hello Anisha\") \n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Variable\n", "Variable are container to store the value. It is declared as soon as value is assiged to it." ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "7\n", "Anisha\n" ] } ], "source": [ "# Variable are Case Sensative\n", "a = 7\n", "A = \"Anisha\"\n", "\n", "print(a)\n", "print(A)" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "\n", "\n" ] } ], "source": [ "# Getting to know type of variable\n", "x = 7\n", "y = \"Anisha\"\n", "print(type(x))\n", "print(type(y))" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Anisha\n", "Anisha\n" ] } ], "source": [ "# Double quote and single quote both are same\n", "x = \"Anisha\"\n", "print(x)\n", "# is the same as\n", "x = 'Anisha'\n", "print(x)" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Rule for assigning variable\n", "Some of the rules for assigning variable are as follows:\n", "1. A variable name must start with a letter or the underscore character\n", "2. A variable name cannot start with a number\n", "3. A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\n", "4. Variable names are case-sensitive (age, Age and AGE are three different variables)" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "ename": "SyntaxError", "evalue": "invalid syntax (572073197.py, line 10)", "output_type": "error", "traceback": [ "\u001b[1;36m File \u001b[1;32m\"C:\\Users\\default.LAPTOP-1LOPBDH8\\AppData\\Local\\Temp\\ipykernel_3076\\572073197.py\"\u001b[1;36m, line \u001b[1;32m10\u001b[0m\n\u001b[1;33m 2myvar = \"Anisha\"\u001b[0m\n\u001b[1;37m ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n" ] } ], "source": [ "#Legal variable names:\n", "myvar = \"Anisha\"\n", "my_var = \"Anisha\"\n", "_my_var = \"Anisha\"\n", "myVar = \"Anisha\"\n", "MYVAR = \"Anisha\"\n", "myvar2 = \"Anisha\"\n", "\n", "#Illegal variable names:\n", "2myvar = \"Anisha\"\n", "my-var = \"Anisha\"\n", "my var = \"Anisha\"" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# String Concatenation\n", "String concatenation means add strings together. We use the + character to add a variable to another variables." ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "AnishaDhakal\n" ] } ], "source": [ "# String Concatenation\n", "first=(\"Anisha\")\n", "second=(\"Dhakal\")\n", "third=first + second\n", "print(third)" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Anisha Dhakal\n" ] } ], "source": [ "# If we want to add space between\n", "a = \"Anisha\"\n", "b = \"Dhakal\"\n", "c = a + \" \" + b\n", "print(c)" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "ename": "TypeError", "evalue": "unsupported operand type(s) for +: 'int' and 'str'", "output_type": "error", "traceback": [ "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m", "\u001b[1;31mTypeError\u001b[0m Traceback (most recent call last)", "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_3076\\3024526177.py\u001b[0m in \u001b[0;36m\u001b[1;34m\u001b[0m\n\u001b[0;32m 2\u001b[0m \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m 3\u001b[0m \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"John\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m", "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'str'" ] } ], "source": [ "# String and number can't concatenate\n", "x = 5\n", "y = \"John\"\n", "print(x + y)" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ " Anisha Anisha Anisha Anisha Anisha Anisha Anisha\n" ] } ], "source": [ "# we can multiply string\n", "a= \" Anisha\"\n", "b= 7\n", "print(a * b)" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# User Input\n", " It is the process to ask input from user and execute it." ] }, { "cell_type": "code", "execution_count": 1, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Enter username:Anisha\n", "Username is: Anisha\n" ] } ], "source": [ "# asking username from user\n", "username = input(\"Enter username:\")\n", "print(\"Username is: \" + username)" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Int() Function\n", "Int functionis used to change the user input into int data type." ] }, { "cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "enter first number7\n", "enter second number2\n" ] } ], "source": [ "#use of int function \n", "first=int(input(\"enter first number\"))\n", "second=int(input(\"enter second number\"))\n", "third= first+ second\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Two or more input in one line\n", "This is way to enter input in many variable at same line." ] }, { "cell_type": "code", "execution_count": 4, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "helloAnishayour age is age\n" ] } ], "source": [ "name,age=\"Anisha\",\"20\" # the input should be in order of variable name \n", "print(\"hello\" + name+\"your age is \"+\"age\")" ] }, { "cell_type": "code", "execution_count": 21, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "enter your name and ageanisha , Dhakal\n" ] } ], "source": [ "# we can add space or , betwwen two values\n", "name,age=input(\"enter your name and age \").split(\",\")\n", "# .split(\",\"): it is used to give comma\n", "# .split(\" \"): it is used to add space" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# String Formatting\n", "The format() method formats the specified value(s) and insert them inside the string's placeholder. The placeholder is defined using curly brackets: {}." ] }, { "cell_type": "code", "execution_count": 5, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "My name is John, I'm 36\n", "My name is John, I'm 36\n", "My name is John, I'm 36\n" ] } ], "source": [ "#named indexes:\n", "txt1 = \"My name is {fname}, I'm {age}\".format(fname = \"John\", age = 36)\n", "#numbered indexes:\n", "txt2 = \"My name is {0}, I'm {1}\".format(\"John\",36)\n", "#empty placeholders:\n", "txt3 = \"My name is {}, I'm {}\".format(\"John\",36)\n", "\n", "print(txt1)\n", "print(txt2)\n", "print(txt3)" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# String Indexing\n", "The index() method finds the first occurrence of the specified value. It raises an exception if the value is not found." ] }, { "cell_type": "code", "execution_count": 22, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "2\n" ] } ], "source": [ "name = \"Hello, my name is ANISHA.\"\n", "\n", "x = name.index(\"l\")\n", "\n", "print(x)" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# String Slicing\n", "We can return a range of characters by using the slice syntax. It specifes the start index and the end index, separated by a colon, to return a part of the string." ] }, { "cell_type": "code", "execution_count": 42, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "a \n" ] } ], "source": [ "#Slicing also counts space\n", "pencil = \"era ser\"\n", "print(pencil[2:4])" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Step Argument\n", "It is process as String Slicing but here we even mention the step at last of [ ]\n" ] }, { "cell_type": "code", "execution_count": 41, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "ns\n" ] } ], "source": [ "# Step Argument, step moving with 2\n", "name=\"Anisha\"\n", "print(name[1:4:2])" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# String Methods\n", "All string methods returns new values. They do not change the original string." ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "- len() function\n", "It is used to count the length of string.\n" ] }, { "cell_type": "code", "execution_count": 9, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "14\n" ] } ], "source": [ "name= \" Anisha dhakal\"\n", "print(len(name))" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ " - lower() Method\n", " It is used to change the given strng in lowercase.\n", " We use . in method\n" ] }, { "cell_type": "code", "execution_count": 10, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ " anisha dhakal\n" ] } ], "source": [ "name= \" Anisha dhakal\"\n", "print(name.lower())" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ " - upper() Method\n", " It is used to change the given strng in uppercase." ] }, { "cell_type": "code", "execution_count": 11, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ " ANISHA DHAKAL\n" ] } ], "source": [ "name= \" Anisha dhakal\"\n", "print(name.upper())" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ " - title() Method\n", " It is used to change first letter of string in capital case." ] }, { "cell_type": "code", "execution_count": 12, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ " Anisha Dhakal\n" ] } ], "source": [ "# it changes first letter a into A\n", "name= \" anisha dhakal\"\n", "print(name.title())" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "- count() Method\n", " It is used to count string as well as character repetation time." ] }, { "cell_type": "code", "execution_count": 31, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "4\n" ] } ], "source": [ "name= \" anisha dhakal\"\n", "print(name.count(\"a\"))" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Solving problem with Space\n", "Some methods are used to resize the space given in the string. It can be solved by using lstrip method,rstrip method and strip method." ] }, { "cell_type": "markdown", "metadata": {}, "source": [ " - lstrip method\n", " It prints all string towards left side, recuding space in left." ] }, { "cell_type": "code", "execution_count": 14, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Anisha \n" ] } ], "source": [ "name=(\" Anisha \")\n", "print(name.lstrip())" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ " - rstrip method\n", " It prints all string towards right side, recuding space in right." ] }, { "cell_type": "code", "execution_count": 15, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ " Anisha\n" ] } ], "source": [ "name=(\" Anisha \")\n", "print(name.rstrip())" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ " - strip method\n", " It prints all string removing space in left and right side." ] }, { "cell_type": "code", "execution_count": 16, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Anisha\n" ] } ], "source": [ "name=(\" Anisha \")\n", "print(name.strip())" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Find and Replace Method\n", "The find() method finds the first occurrence of the specified value.The Python programming language's built-in replace() method creates a replica of the string by replacing every instance of one substring with a different substring." ] }, { "cell_type": "code", "execution_count": 17, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "7\n" ] } ], "source": [ "#Find method\n", "txt = \"Hello, welcome to my world.\"\n", "\n", "x = txt.find(\"welcome\")\n", "\n", "print(x)\n" ] }, { "cell_type": "code", "execution_count": 18, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "I like apples\n" ] } ], "source": [ "# replace method\n", "txt = \"I like mangos\"\n", "\n", "x = txt.replace(\"mangos\", \"apples\")\n", "\n", "print(x)\n", "\n", "\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# String as Immutable\n", "These means new output doesn't come in case of string, replace method should be added to new variable name first." ] }, { "cell_type": "code", "execution_count": 19, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "anisha\n" ] } ], "source": [ "string=\"anisha\"\n", "string.replace('a','A')\n", "print(string)" ] }, { "cell_type": "code", "execution_count": 35, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "anisha\n" ] } ], "source": [ "# Incase we want to show replace output\n", "string=\"anisha\"\n", "string.replace('a','A')\n", "print(string.replace('a','A',))" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [] } ], "metadata": { "kernelspec": { "display_name": "Python 3 (ipykernel)", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.7.13" }, "vscode": { "interpreter": { "hash": "b38e25845b4f0276d4bb2cf97c0646ab4a24ad96955e299a7e8984d834f5527f" } } }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">Why python in Artificial Intelligence?</title><link href="https://anisha777.github.io/AI-BLOG/programming/2022/06/22/My-Second-Post.html" rel="alternate" type="text/html" title="Why python in Artificial Intelligence?" /><published>2022-06-22T00:00:00-05:00</published><updated>2022-06-22T00:00:00-05:00</updated><id>https://anisha777.github.io/AI-BLOG/programming/2022/06/22/My-Second-Post</id><author><name></name></author><category term="Programming" /><summary type="html"><![CDATA[Here we will be clear why python is essential for every AI programmers.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://anisha777.github.io/AI-BLOG/images/py.jpg" /><media:content medium="image" url="https://anisha777.github.io/AI-BLOG/images/py.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Some basic Git-bash commands</title><link href="https://anisha777.github.io/AI-BLOG/programming/2022/06/21/My-First-Post.html" rel="alternate" type="text/html" title="Some basic Git-bash commands" /><published>2022-06-21T00:00:00-05:00</published><updated>2022-06-21T00:00:00-05:00</updated><id>https://anisha777.github.io/AI-BLOG/programming/2022/06/21/My-First-Post</id><author><name></name></author><category term="Programming" /><summary type="html"><![CDATA[Essentials Git commands used in VS-Code]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://anisha777.github.io/AI-BLOG/images/Git-bash.png" /><media:content medium="image" url="https://anisha777.github.io/AI-BLOG/images/Git-bash.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>