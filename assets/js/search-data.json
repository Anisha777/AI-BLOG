{
  
    
        "post0": {
            "title": "Basic of Python",
            "content": "Basic of Python . The syntax of Python is straightforward and resembles that of English. Python&#39;s syntax differs from various other programming languages in that it enables programmers to construct applications with fewer lines of code. Python operates on an interpreter system, allowing for the immediate execution of written code. As a result, prototyping can proceed quickly. . Some basics of python . Print() Function | Escape Sequence Types of Escape sequence | . | Comments | Variable | Rule for assigning variable | String Concatenation | User Input | Int() Function | Two or more input in one line | String Formatting | String Indexing | String Slicing | Step Argument | String methods len() Function | lower() Method | Upper() Method | Tilt() Method | Count() Method | . | Solving problem with Space lstrip Method | rstrip Method | strip Method | . | Find and Replace Method | String as Immutable | . Print() Function . Any number of parameters can be sent to the print() function in Python, which puts them out on a single line of text. . print(&quot;Hello Anisha&quot;) print(&#39;Hello Anisha&#39;) . Hello Anisha Hello Anisha . print(&quot;Hello &quot;Anisha&quot;&quot;) print(&#39;Hello &#39;Anisha&#39;&#39;) . File &#34;C: Users default.LAPTOP-1LOPBDH8 AppData Local Temp ipykernel_3076 3133193719.py&#34;, line 2 print(&#34;Hello &#34;Anisha&#34;&#34;) ^ SyntaxError: invalid syntax . print(&quot;hello &#39;Anisha&#39;&quot;) print(&#39;Hello &quot;Anisha&quot;&#39;) . hello &#39;Anisha&#39; Hello &#34;Anisha&#34; . Escape Sequence . Use an escape character to terminate characters that aren&#39;t allowed in a string. A backslash (/) is an escape character, and the character you want to insert comes after it. . print(&quot;Hello &quot;Anisha &quot;&quot;) . Hello &#34;Anisha&#34; . Types of Escape sequence &#39; Single Quote Backslash n New Line r Carriage Return t Tab b Backspace f Form Feed | . Comments . Python code can be explained using comments.Comments are sued to make code more readable. . # Single line comments are done using &#39;#&#39; symbol # example # This is single line comment . # Multiple line comments are done using &#39; &quot;&quot;&quot; &#39; &#39; &quot;&quot;&quot;&quot; &#39; symbol # example &quot;&quot;&quot; This is a comment written in more than just one line &quot;&quot;&quot; print(&quot;Hello Anisha&quot;) . Hello Anisha . Variable . Variable are container to store the value. It is declared as soon as value is assiged to it. . a = 7 A = &quot;Anisha&quot; print(a) print(A) . 7 Anisha . x = 7 y = &quot;Anisha&quot; print(type(x)) print(type(y)) . &lt;class &#39;int&#39;&gt; &lt;class &#39;str&#39;&gt; . x = &quot;Anisha&quot; print(x) # is the same as x = &#39;Anisha&#39; print(x) . Anisha Anisha . Rule for assigning variable . Some of the rules for assigning variable are as follows: . A variable name must start with a letter or the underscore character | A variable name cannot start with a number | A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) | Variable names are case-sensitive (age, Age and AGE are three different variables) | myvar = &quot;Anisha&quot; my_var = &quot;Anisha&quot; _my_var = &quot;Anisha&quot; myVar = &quot;Anisha&quot; MYVAR = &quot;Anisha&quot; myvar2 = &quot;Anisha&quot; #Illegal variable names: 2myvar = &quot;Anisha&quot; my-var = &quot;Anisha&quot; my var = &quot;Anisha&quot; . File &#34;C: Users default.LAPTOP-1LOPBDH8 AppData Local Temp ipykernel_3076 572073197.py&#34;, line 10 2myvar = &#34;Anisha&#34; ^ SyntaxError: invalid syntax . String Concatenation . String concatenation means add strings together. We use the + character to add a variable to another variables. . first=(&quot;Anisha&quot;) second=(&quot;Dhakal&quot;) third=first + second print(third) . AnishaDhakal . a = &quot;Anisha&quot; b = &quot;Dhakal&quot; c = a + &quot; &quot; + b print(c) . Anisha Dhakal . x = 5 y = &quot;John&quot; print(x + y) . TypeError Traceback (most recent call last) ~ AppData Local Temp ipykernel_3076 3024526177.py in &lt;module&gt; 2 x = 5 3 y = &#34;John&#34; -&gt; 4 print(x + y) TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39; . a= &quot; Anisha&quot; b= 7 print(a * b) . Anisha Anisha Anisha Anisha Anisha Anisha Anisha . User Input . It is the process to ask input from user and execute it. . username = input(&quot;Enter username:&quot;) print(&quot;Username is: &quot; + username) . Enter username:Anisha Username is: Anisha . Int() Function . Int functionis used to change the user input into int data type. . first=int(input(&quot;enter first number&quot;)) second=int(input(&quot;enter second number&quot;)) third= first+ second . enter first number7 enter second number2 . Two or more input in one line . This is way to enter input in many variable at same line. . name,age=&quot;Anisha&quot;,&quot;20&quot; # the input should be in order of variable name print(&quot;hello&quot; + name+&quot;your age is &quot;+&quot;age&quot;) . helloAnishayour age is age . name,age=input(&quot;enter your name and age &quot;).split(&quot;,&quot;) # .split(&quot;,&quot;): it is used to give comma # .split(&quot; &quot;): it is used to add space . enter your name and ageanisha , Dhakal . String Formatting . The format() method formats the specified value(s) and insert them inside the string&#39;s placeholder. The placeholder is defined using curly brackets: {}. . txt1 = &quot;My name is {fname}, I&#39;m {age}&quot;.format(fname = &quot;John&quot;, age = 36) #numbered indexes: txt2 = &quot;My name is {0}, I&#39;m {1}&quot;.format(&quot;John&quot;,36) #empty placeholders: txt3 = &quot;My name is {}, I&#39;m {}&quot;.format(&quot;John&quot;,36) print(txt1) print(txt2) print(txt3) . My name is John, I&#39;m 36 My name is John, I&#39;m 36 My name is John, I&#39;m 36 . String Indexing . The index() method finds the first occurrence of the specified value. It raises an exception if the value is not found. . name = &quot;Hello, my name is ANISHA.&quot; x = name.index(&quot;l&quot;) print(x) . 2 . String Slicing . We can return a range of characters by using the slice syntax. It specifes the start index and the end index, separated by a colon, to return a part of the string. . pencil = &quot;era ser&quot; print(pencil[2:4]) . a . Step Argument . It is process as String Slicing but here we even mention the step at last of [ ] . name=&quot;Anisha&quot; print(name[1:4:2]) . ns . String Methods . All string methods returns new values. They do not change the original string. . len() function It is used to count the length of string. | . name= &quot; Anisha dhakal&quot; print(len(name)) . 14 . lower() Method It is used to change the given strng in lowercase. We use . in method | . name= &quot; Anisha dhakal&quot; print(name.lower()) . anisha dhakal . upper() Method It is used to change the given strng in uppercase. | . name= &quot; Anisha dhakal&quot; print(name.upper()) . ANISHA DHAKAL . title() Method It is used to change first letter of string in capital case. | . name= &quot; anisha dhakal&quot; print(name.title()) . Anisha Dhakal . count() Method It is used to count string as well as character repetation time. | . name= &quot; anisha dhakal&quot; print(name.count(&quot;a&quot;)) . 4 . Solving problem with Space . Some methods are used to resize the space given in the string. It can be solved by using lstrip method,rstrip method and strip method. . lstrip method It prints all string towards left side, recuding space in left. | . name=(&quot; Anisha &quot;) print(name.lstrip()) . Anisha . rstrip method It prints all string towards right side, recuding space in right. | . name=(&quot; Anisha &quot;) print(name.rstrip()) . Anisha . strip method It prints all string removing space in left and right side. | . name=(&quot; Anisha &quot;) print(name.strip()) . Anisha . Find and Replace Method . The find() method finds the first occurrence of the specified value.The Python programming language&#39;s built-in replace() method creates a replica of the string by replacing every instance of one substring with a different substring. . txt = &quot;Hello, welcome to my world.&quot; x = txt.find(&quot;welcome&quot;) print(x) . 7 . txt = &quot;I like mangos&quot; x = txt.replace(&quot;mangos&quot;, &quot;apples&quot;) print(x) . I like apples . String as Immutable . These means new output doesn&#39;t come in case of string, replace method should be added to new variable name first. . string=&quot;anisha&quot; string.replace(&#39;a&#39;,&#39;A&#39;) print(string) . anisha . string=&quot;anisha&quot; string.replace(&#39;a&#39;,&#39;A&#39;) print(string.replace(&#39;a&#39;,&#39;A&#39;,)) . anisha .",
            "url": "https://anisha777.github.io/AI-BLOG/programming/2022/06/29/My-Third-Blog.html",
            "relUrl": "/programming/2022/06/29/My-Third-Blog.html",
            "date": " • Jun 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Why python in Artificial Intelligence?",
            "content": "Python- Programming language for AI . Introduction to Python Programming . Python is an object-oriented, high-level, dynamically semantic programming language. It is extremely appealing for rapid application development due to its high-level built-in data structures, dynamic typing, and dynamic binding. Python’s straightforward syntax prioritizes readability and makes it simple to learn, which lowers the cost of program maintenance. It supports modules and packages, which encourages modularity and code reuse of the program. For all popular platforms, the Python interpreter and the comprehensive standard library are freely distributable and available in source or binary form. . Feature of Python Programming . Python can be referred to as a “interpreted language,” which, put simply, means that it can be used by the programmer directly to run the program without needing to be first translated into machine language instructions. As a result, it is a sufficient language for usage with an emulator or virtual machine that is based on the native code of an existent machine, which is the language that hardware can understand.This high-level programming language is used in challenging situations. In order to be more comprehensive and hence expand their use, high-level languages support arrays, variables, objects, complex arithmetic, Boolean expressions, and other abstract ideas in computer science.Python also has a dynamic type system and automatic memory management that support a variety of programming paradigms, including procedural, imperative, object-oriented, and functional programming, to name a few.Every operating system can use Python, and its open-source counterpart, CPython, is rapidly gaining popularity. . Why is python in need for Artificial Intelligence? . Python is the most basic programming language available and is actually only one-fifth of other OOP languages. It is currently one of the most widely used languages in business because of this.Python is in need for Artificial Intelligence due to following properties: Supporting Libraries Python comes with Prebuilt Libraries such as Numpy to do scientific calculations, Scipy for advanced computing, and Pybrain for machine learning (Python Machine Learning), making it among the top languages for AI.PortabilityPython is platform-independent and hence is among the most versatile and well-known solutions for numerous platforms and technologies, with few alterations to the foundations of coding.Quality of SoftwarePython offers the greatest flexibility among other programs, with the option of choosing among OOPs technique and scripting.Fun to Use Python is simple and supports a lot of libraries. It is easy to learn thus makes any programmer fun-loving. Productivity of DevelopersPython is easy to debug as its code is aound one-fifth of other Object Oriented Programming.Thus, Programmers can save their time to code with effective result. . Summary . Python is an important programming language for AI because it includes strong frameworks, such as Machine Learning in Python, which satisfies practically all of the standards in this field. It is one of the easiest and most effective visualization tools available. AI demands a lot of studies to test an innovative idea but another programming language will never be able to accomplish the project successfully. With twenty to thirty lines of code, almost any concept can be validated in Python. This makes it an incredibly helpful language for advancing AI.Python is the best AI programming language, and this makes it obvious. Python offers relevance for many additional objectives in addition to being the best AI programming language. .",
            "url": "https://anisha777.github.io/AI-BLOG/programming/2022/06/22/My-Second-Post.html",
            "relUrl": "/programming/2022/06/22/My-Second-Post.html",
            "date": " • Jun 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Some basic Git-bash commands",
            "content": "Git-Bash Commands . Introduction . An application called Git Bash gives operating system users access to the Git command line. It is a command-line shell that enables git on the system’s command line. Version control systems and development processes are supported by the text editor VSCode. It offers resources so a user may create codes without difficulty. These act as prerequisites, thus one should be familiar with them. Git was initially created to facilitate collaboration among programmers working on source code throughout the software development process. Git is a distributed version-control system for monitoring changes in any set of files. Git command can be written either in Git-bash or itself in VS-Code terminal. Some of the basic Git-bash commands are as follow: . pwd . pwd command refers to print working directory. The complete path name of your current directory is written  by the pwd command . There is a / between each directory (slash). The first / stands for the root directory, and the last directory listed is the one you are currently in. . ls . ls command refers to list. All the list of files and folder inside the current directory is enlisted with the help of this command. . clear . clear command refers to clearing all the commands.This command is used to bring the command line on top of the computer terminal. . cd . cd command refers to current directory. It helps to display the current folder we are working on.Syntax for using cd command is: cd F : // . mkdir . mkdir command refers to make directory. Directory refers to any folder.We can make any folder using mkdir command.Syntax for using mkdir command is: mkdir “foldername”If we don’t want to use double quotation mark for, we an simple write name of folder using _ sign.for example:mkdir folder_nameQuestion to arise1. What if we don’t use _ sign?- If we don’t use _ sign while writing folder name and simply write mkdir folder name, then there will be two folder created with name folder and name. . cd.. . cd.. command refers to go back. This command is used to return back from existing directory path. . touch . touch command is used to create a file inside any folder.Syntax to create file inside any folder:touch “file name.extension” . rm . rm command refers to remove.This command is used to remove ani file inside the folder.Syntax to remove file from any folder:rm “file name” . rm -rf . rm -rf command refers to remove with recursive force. This command is used to remove a complete folder with its all file.Syntax to remove folder:rm -rf “folder name” . Summary of using Git-bash command in VS-Code . Git bash command are useful way to work faster by the programmer. Developer doesn’t want to spend their time working with computers basic functionality . They simply want to code the function to work easier in the program.Insted of going all way around to create new folder, file, delete, modify and other various work we can simply write code for these kind of setup in terminal. Terminal provides us platform to crete shortcut basis to work in the text-editor. |",
            "url": "https://anisha777.github.io/AI-BLOG/programming/2022/06/21/My-First-Post.html",
            "relUrl": "/programming/2022/06/21/My-First-Post.html",
            "date": " • Jun 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi,I am Anisha! I am Data scientist who constantly writes an article about artificial intelligence. .",
          "url": "https://anisha777.github.io/AI-BLOG/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://anisha777.github.io/AI-BLOG/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}